const mongodb = require('../initializers/db');
const ObjectId = require('mongodb').ObjectId;
const { validationResult } = require('express-validator');


const getAll =  (req, res) => {
    // #swagger.description = "Gets all castles in collection"
    try {
         mongodb
        .getDb()
        .db('GBSites')
        .collection('castles')
        .find()
        .toArray((err,lists) => {
            if (err) {
                res.status(400).json({ message: err});
            } else {
                res.setHeader('Content-Type', 'application/json');
                res.status(200).json(lists);
            }
        });    
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occurred while getting the castles'});
    }
};

const getOne = async (req, res) => {
    if(!ObjectId.isValid(req.params.id)) {
        res.status(400).json('A valid castle id must be used find a castle')
    } else {
    // #swagger.description = "Gets one castle in collection selected by id"
    try {       
        const castleId = new ObjectId(req.params.id);
        mongodb
            .getDb()
            .db('GBSites')
            .collection('castles')
            .find({_id: castleId})
            .toArray((err, result) => {
                if (err) {
                    res.status(400).json({message: err});
                } else {
                    res.setHeader('Content-Type', 'application/json');
                    res.status(200).json(result[0]);
                }
        });
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occurred while getting a castle'});
    }
    }
};

const createOne = async (req, res) => {
    // #swagger.description = "Creates one castle in collection"
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }
        const castle = {
            castleName: req.body.castleName,
            streetAddr: req.body.streetAddr,
            cityAddr: req.body.cityAddr,
            postcode: req.body.postcode,
            phoneNum: req.body.phoneNum,
            website: req.body.website,
            description: req.body.description
        };
        const response = await mongodb
            .getDb()
            .db('GBSites')
            .collection('castles')
            .insertOne(castle);
        if (response.acknowledged) {
            res.status(201).json(response);
        } else {
            res.status(500).json(response.error);
        }
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occurred while creating a castle'});
    } 
};

const updateOne = async (req, res) => {
    if(!ObjectId.isValid(req.params.id)) {
        res.status(400).json('A valid castle id must be used to update a castle');
    } else {
    // #swagger.description = "Updates one specific castle in collection selected by id"
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }
        const castleId = new ObjectId(req.params.id);
        const castle = {
            castleName: req.body.castleName,
            streetAddr: req.body.streetAddr,
            cityAddr: req.body.cityAddr,
            postcode: req.body.postcode,
            phoneNum: req.body.phoneNum,
            website: req.body.website,
            description: req.body.description
        };
        const response = await mongodb
        .getDb()
        .db('GBSites')
        .collection('castles')
        .replaceOne({_id: castleId}, castle);
        // console.log(response);
        if (response.modifiedCount > 0) {
            console.log(res.status);
            res.status(204).send();
        } else {
            res.status(500).json(response.error);
        }
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occured while updating a castle'});
    }
    }

};

const deleteOne = async (req, res) => {
    if(!ObjectId.isValid(req.params.id)) {
        res.status(400).json('A valid museum id must be used to delete a museum');
    } else {
    // #swagger.description = "Deletes one specific castle in collection selected by id"
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }
        const castleId = new ObjectId(req.params.id);
        const response = await mongodb
        .getDb()
        .db('GBSites')
        .collection('castles')
        .deleteOne({_id: castleId}, true);
        console.log(response);
        if (response.deletedCount > 0) {
            res.status(200).send({response, status: 200});
        } else {
            res.status(500).json(response.error);
        }
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occurred while deleting the castle'});
    }
    }
};

module.exports = {getAll, getOne, createOne, updateOne, deleteOne};