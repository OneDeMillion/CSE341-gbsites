/* eslint-disable no-undef */
const mongodb = require('../initializers/db');
const ObjectId = require('mongodb').ObjectId;
const { validationResult } = require('express-validator');

const getAll = (req, res) => {
    // #swagger.description = "Gets all museums in collection"
    try {
        mongodb
        .getDb()
        .db('GBSites')
        .collection('museums')
        .find()
        .toArray((err, lists) => {
            if (err) {
              res.status(400).json({ message: err });
            } else {
                res.setHeader('Content-Type', 'application/json');
                res.status(200).send(lists);    
            }
        });    
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occurred while getting all the museums'});
    }
};

const getOne = (req, res) => {
    if(!ObjectId.isValid(req.params.id)) {
        res.status(400).json('A valid museum id must be used to find a museum')
    } else {
    // #swagger.description = "Gets one specific museum in collection selected by id"
    try {
        const museumId = new ObjectId(req.params.id); 
        mongodb
            .getDb()
            .db('GBSites')
            .collection('museums')
            .find({_id: museumId})
            .toArray((err, result) => {
                if (err) {
                    res.status(400).json({message: err});
                } else {
                    res.setHeader('Content-Type', 'application/json');
                    res.status(200).send(result[0]);    
                }
        });
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occurred while getting the museum'});
    }

    }
};

const createOne = async (req, res) => {
    // #swagger.description = "Create one museum in collection"
    try {
            // Validate request values
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }
        const museum = {
            museumName: req.body.museumName,
            streetAddr: req.body.streetAddr,
            cityAddr: req.body.cityAddr,
            postcode: req.body.postcode,
            phoneNum: req.body.phoneNum,
            website: req.body.website,
            description: req.body.description
        };
        const response = await mongodb
            .getDb()
            .db('GBSites')
            .collection('museums')
            .insertOne(museum);
        if (response.acknowledged) {
            res.status(201).json(response);
        } else {
            res.status(500).send();
        }
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occured while creating a new Museum'});
    }
};

const updateOne = async (req, res) => {
    if(!ObjectId.isValid(req.params.id)) {
        res.status(400).json('A valid museum id must be used to update a museum');
    } else {
    // #swagger.description = "Updates one specific museum in collection selected by id"
    try {
        // Validate request values
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }            
        const museumId = new ObjectId(req.params.id);
        const museum = {
            museumName: req.body.museumName,
            streetAddr: req.body.streetAddr,
            cityAddr: req.body.cityAddr,
            postcode: req.body.postcode,
            phoneNum: req.body.phoneNum,
            website: req.body.website,
            description: req.body.description
        };
        const response = await mongodb
        .getDb()
        .db('GBSites')
        .collection('museums')
        .replaceOne({_id: museumId}, museum)
        // console.log(response);
        if (response.modifiedCount > 0) {
            console.log(res.status);
            res.status(204).send();
        } else {
            res.status(500).json(response.error);
        }
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occured while updating the museum'});
    }
    }
};

const deleteOne = async (req, res) => {
    if(!ObjectId.isValid(req.params.id)) {
        res.status(400).json('A valid museum id must be used to delete a museum');
    } else {
    // #swagger.description = "Deletes one specific museum in collection selected by id"
    try {
        // Validate request values
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }
        const museumId = new ObjectId(req.params.id);
        const response = await mongodb
        .getDb()
        .db('GBSites')
        .collection('museums')
        .deleteOne({_id: museumId}, true);
        console.log(response);
        if (response.deletedCount > 0) {
            res.status(200).send({response, status: 200});
        } else {
            res.status(500).json(response.error);
        }
    } catch (err) {
        res.status(500).json({message: err.message || 'An error occured while deleting the museum'});
    }
    }
};

module.exports = {getAll, getOne, createOne, updateOne, deleteOne};